service: memory-db-redis

custom:
  serverless-offline:
    host: 0.0.0.0
    port: 3088
    httpPort: 3088
    corsAllowOrigin: '*'
    corsAllowHeaders: 'accept,content-type,x-api-key,Authorization'
  prune:
    automatic: true
    number: 5
  
  deploy:
    local: mdb.serverless.${self:provider.region}.deploys

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 128
  stage: ${opt:stage, 'local'}
  region: us-east-1
  environment: ${file(./serverless.${self:provider.stage}.env.yml):environment}
  deploymentBucket:
    blockPublicAccess: true # Prevents public access via ACLs or bucket policies. Default is false
    skipPolicySetup: false # Prevents creation of default bucket policy when framework creates the deployment bucket. Default is false
    name: ${self:custom.deploy.${self:provider.stage}} # Deployment bucket name. Default is generated by the framework
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - s3:getObject
        - s3:ListBucket
        - s3:putObject
        - s3:listObjectsV2
      Resource: "*"

functions:
  - ${file(./serverless.base.functions.yml), ""}
  - ${file(./serverless.${self:provider.stage}.functions.yml), ""}
      

resources:
  Conditions:
    IsProd:
      Fn::Equals:
        - ${self:provider.stage}
        - prod
    IsStage:
      Fn::Equals:
        - ${self:provider.stage}
        - stage  
    IsProdOrStage:
      Fn::Or:
        - Condition: IsProd
        - Condition: IsStage
  Resources:
    memdbClusterVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: !Join [ "-", [ !Ref "AWS::StackName","vpc" ] ]
    privateSubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref memdbClusterVPC
        AvailabilityZone: "us-east-1b"
        CidrBlock: 10.0.1.0/24
        Tags:
          - Key: Name
            Value: !Join [ "-", [ !Ref "AWS::StackName","privatesubnet-a" ] ]
    privateSubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref memdbClusterVPC
        AvailabilityZone: "us-east-1a"
        CidrBlock: 10.0.2.0/24
        Tags:
          - Key: Name
            Value: !Join [ "-", [ !Ref "AWS::StackName","privatesubnet-b" ] ]
    memoryDBClusterSubnetGroup:
      Type: AWS::MemoryDB::SubnetGroup
      Properties:
        Description: MemoryDB cluster Subnet-group
        SubnetGroupName: my-memdb-private-subnetgroup
        SubnetIds:
          - !Ref privateSubnetA
          - !Ref privateSubnetB
    memoryDBClusterSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: MemoryDB cluster access
        VpcId: !Ref memdbClusterVPC
    lambdaSG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: lambda access
        VpcId: !Ref memdbClusterVPC
        SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
    lambdaSGEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        CidrIp: 0.0.0.0/0
        GroupId:
          Fn::GetAtt:
            - lambdaSG
            - GroupId
        IpProtocol: -1
    memoryDBSGIngress:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId:
          Fn::GetAtt:
            - memoryDBClusterSG
            - GroupId
        IpProtocol: tcp
        ToPort: 6379
        FromPort: 6379
        SourceSecurityGroupId: !Ref lambdaSG
    memoryDBSGEgress:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        Description: Allow all outbound traffic
        CidrIp: 0.0.0.0/0
        GroupId:
          Fn::GetAtt:
            - memoryDBClusterSG
            - GroupId
        IpProtocol: -1
    memoryDBCluster:
      Type: AWS::MemoryDB::Cluster
      Properties:
        ClusterName: my-memorydb-cluster
        Description: Redis cluster
        EngineVersion: 6.2
        ACLName: open-access
        NodeType: db.t4g.small
        NumReplicasPerShard: 2
        NumShards: 2
        SecurityGroupIds:
          - !Ref memoryDBClusterSG
        SubnetGroupName: !Ref memoryDBClusterSubnetGroup
        TLSEnabled: true
    MemoryDBIamRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    

    # Used this to write to S3 as connection of memoryDb is private and can't be access through internet.
    S3VpcEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        ServiceName: com.amazonaws.us-east-1.s3
        VpcId: !Ref memdbClusterVPC
        VpcEndpointType: Interface
        SubnetIds: 
          - !Ref privateSubnetA
          - !Ref privateSubnetB
        SecurityGroupIds:
          - !Ref lambdaSG
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - s3:getObject
                - s3:ListBucket
                - s3:putObject
                - s3:listObjectsV2
              Resource: "*"

package:
  patterns:
    - '!.env'
    - '!.env**'
    - '!test/**'
    - '!build/**'
    - '!data/**'
    - '!.aws/**'
    - '!docker/**'
    - '!serverless*'
    - '!.git/**'
    - '!.gitignore'
    - '!.DS_Store'
    - '!npm-debug.log'
    - '!.serverless/**'
    - '!.serverless_plugins/**'
    - '!.vscode/**'
    - '!testdata/**'
    - '!run'
    - '!node'
    - '!npm'
    - '!serverless'

plugins:
  - serverless-offline
  - serverless-prune-plugin